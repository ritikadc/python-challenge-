    import osimport csv# Opening and reading the CSV Filecsvpath = os.path.join("Resources","budget_data.csv")writtencsvpath = os.path.join("analysis","results.csv")with open(csvpath, encoding='UTF-8') as csvfile:       csvreader = csv.reader(csvfile, delimiter=',')      next(csvreader)      monthcount = 0      totalAmount = 0      previousInt = None      change = 0      greatestIncrease = 0      greatestDecrease = 0      for row in csvreader:       monthcount += 1       totalColumnFix = int(row[1])       totalAmount += totalColumnFix       if previousInt is not None:           numchange = totalColumnFix - previousInt           change += numchange           if numchange > greatestIncrease:               greatestIncrease = numchange               greatestIncreaseMonthDay = row[0]           if numchange < greatestDecrease:               greatestDecrease = numchange               greatestDecreaseMonthDay = row[0]       previousInt = totalColumnFix      if monthcount > 1:          avgChange = change / (monthcount - 1)      else:          avgChange = 0line0 = (f"Financial Analysis \n----------------------------")line1 = (f"Total Months: {monthcount}")line2 = (f"Total: ${totalAmount}")line3 = (f"Average Change: ${avgChange: .2f}")line4 = (f"Greatest Increase in Profits: {greatestIncreaseMonthDay} ({greatestIncrease})")line5 = (f"Greatest Decrease in Profits: {greatestDecreaseMonthDay} ({greatestDecrease})")print(f"Financial Analysis \n----------------------------")print(f"Total Months: {monthcount}")print(f"Total: ${totalAmount}")print(f"Average Change: ${avgChange: .2f}")print(f"Greatest Increase in Profits: {greatestIncreaseMonthDay} ({greatestIncrease})")print(f"Greatest Decrease in Profits: {greatestDecreaseMonthDay} ({greatestDecrease})")writtencsvpath = os.path.join("analysis","results.csv")with open(writtencsvpath, 'w') as csvfile:    csvwriter = csv.writer(csvfile, delimiter=",")    csvwriter.writerow([f"{line0} \n{line1} \n{line2} \n{line3} \n{line4} \n{line5}"])# beginningRows()# getAnalysis()